// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  NORMAL
  MODERATOR
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      String
  isBanned  Boolean  @default(false)
  reports   IncidentReport[]
  votes     Vote[]
  comments  Comment[]
}

model IncidentReport {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl    String?
  isAnonymous Boolean  @default(false)
  isFlagged   Boolean  @default(false)
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  createdAt   DateTime @default(now())
  votes       Vote[]
  comments    Comment[]
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  reportId  String
  voteType  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  report    IncidentReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  @@unique([userId, reportId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  reportId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  report    IncidentReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}